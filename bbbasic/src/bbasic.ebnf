@export
Program = body:Block $;

Block = {statements:Statement {NewLine} } [statements:Statement];

Statement = !StatementTerminator
            ( @:CaseStatement
            | @:ExitWhileStatement
            | @:WhileStatement
            | @:ExitForStatement
            | @:IfStatement
            | @:ForStatement
            | @:PrintStatement
            | @:EndStatement
            | @:Assignment
            | @:StringAssignment );

StatementTerminator = KWWhen | KWEndcase | KWEndif | KWEndwhile;


NewLine = "\n" | "\r\n";

# Expression

@export
@leftrec
Expression = @:Add | @:Sub | @:Term;
Add = left:*Expression '+'  right:Term;
Sub = left:*Expression '-' right:Term;
@leftrec
Term = @:Mul | @:Div | @:Factor;
Mul = left:*Term '*' right:Factor;
Div = left:*Term '/' right:Factor;
@memoize
Factor = @:Group | @:NumberLiteral | @:NumericVariable;
Group = '(' body:*Expression ')';


# Bool Expression
@export
BoolExpression = disjunction:BoolDisjunction;
BoolDisjunction = conjunction:BoolConjunction { "OR" conjunction:BoolConjunction };
BoolConjunction = term:BoolTerm { "AND" term:BoolTerm };
BoolTerm = ("(" expression:BoolExpression ")") | condition:BoolCondition;
BoolCondition = left:BoolOperand op:BoolOperator right:BoolOperand;
BoolOperator = @:BoolOpNotEqual | @:BoolOpEqual | @:BoolOpLowerEqual | @:BoolOpGreaterEqual | @:BoolOpLower | @:BoolOpGreater;
BoolOperand = @:StringVariable | @:Expression | @:StringLiteral;
BoolOpNotEqual = "<>";
BoolOpEqual = "=";
BoolOpLowerEqual = "<=";
BoolOpGreaterEqual = ">=";
BoolOpLower = "<";
BoolOpGreater = ">";

# IF
ThenBlock = @:Block;
ElseBlock = @:Block;
IfCondition = @:BoolDisjunction;
IfStatement = KWIf condition:IfCondition KWThen {NewLine}+ then_block:ThenBlock [{NewLine} KWElse {NewLine}+ else_block:ElseBlock] {NewLine} KWEndif;


# CASE
WhenValue = @:NumericVariable | @:StringVariable | @:FloatLiteral | @:IntegerLiteral;
WhenItem =  &KWEndcase | KWWhen (values:WhenValue { "," values:WhenValue } ":" [NewLine] statements:Statement { { NewLine }+ statements:Statement });
CaseStatement = KWCase ( variable:NumericVariable | variable:StringVariable ) KWOf {NewLine}+
                whens: WhenItem
                {
                    {NewLine}+
                    whens: WhenItem
                 }

                KWEndcase;

# WHILE
WhileStatement = KWWhile condition:WhileCondition {NewLine}+ body:Block {NewLine} KWEndwhile;
WhileCondition = @:BoolDisjunction;
ExitWhileStatement = KWExit KWWhile;

# ASSIGNMENT
Assignment = variable:NumericVariable "=" value:Expression;
StringAssignment = variable:StringVariable "=" value:StringLiteral;

# PRINT
PrintStatement = KWPrint { list:PrintListItem };
PrintSkipNl = ";";
PrintListItem = (value:StringVariable | value:Expression | value:StringLiteral) [sep:PrintListSep];
PrintListSep = ";";

# FOR
ForAssignment = variable:NumericVariable '=' value:Expression;
ForStatement = KWFor assignment:ForAssignment KWTo target:Expression [step:ForStep] NewLine body:Block next:ForNext;
#ForStatement = KWFor assignment:Assignment KWTo target:Expression;
ForStep = KWStep value:Expression;
ForNext = KWNext [NumericVariable];
ExitForStatement = KWExit KWFor;


# END
@memoize
EndStatement  = KWEnd;

# KEYWORDS
KWPrint = 'PRINT';
KWFor = 'FOR';
KWTo = 'TO';
KWStep = 'STEP';
KWNext = 'NEXT';
KWEnd = 'END';
KWIf = 'IF';
KWThen = 'THEN';
KWElse = 'ELSE';
KWEndif = 'ENDIF';
KWExit = "EXIT";
KWWhile = "WHILE";
KWEndwhile = "ENDWHILE";
KWCase = "CASE";
KWEndcase = "ENDCASE";
KWWhen = "WHEN";
KWOf = "OF";
KWOtherwise = "OTHERWISE";

# Variable
NumericVariable = name:VariableName [( type_dem:FloatDenominator | type_dem:IntegerDenominator | type_dem:ByteDenominator)];
FloatDenominator = '#';
IntegerDenominator = '\u0025';
ByteDenominator = '&';
StringDenominator = '\u0024';
StringVariable = name:VariableName StringDenominator;

@no_skip_ws
@string
VariableName = ( >ALPHA | "_" | "`" ) { >ALPHA | >DIGIT | "_" };

# LITERALS
NumberSign = '+' | '-';
NumberLiteral = value:FloatLiteral | value:IntegerLiteral;

IntegerLiteral = body:IntegerBody;
@no_skip_ws
@string
IntegerBody = [NumberSign] {'0'..'9'}+;

FloatLiteral = body:FloatBody;
@no_skip_ws
@string
FloatBody = [NumberSign] { >DIGIT }+ "." { >DIGIT} [ 'E' { >DIGIT }+ ];

@no_skip_ws
StringLiteral = '"' body:StringBody '"';

@no_skip_ws
@string
StringBody = {!'"' char};


# Basics
ALPHA = 'a'..'z' | 'A'..'Z';
DIGIT = '0'..'9';

@no_skip_ws
Whitespace = {" "};