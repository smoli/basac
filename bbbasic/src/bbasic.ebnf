@export
Program = body:Block $;

Block = {statements:Statement {NewLine} } [statements:Statement];

Statement = ( @:ForStatement | @:PrintStatement | @:EndStatement | @:Assignment  );

NewLine = "\n";

# Expression

@export
@leftrec
Expression = @:Add | @:Sub | @:Term;
Add = left:*Expression '+'  right:Term;
Sub = left:*Expression '-' right:Term;
@leftrec
Term = @:Mul | @:Div | @:Factor;
Mul = left:*Term '*' right:Factor;
Div = left:*Term '/' right:Factor;
@memoize
Factor = @:Group | @:NumberLiteral | @:Variable;
Group = '(' body:*Expression ')';


# ASSIGNMENT
Assignment = variable:Variable "=" ( value:Expression | value:StringLiteral );

# PRINT
PrintStatement = KWPrint { list:PrintListItem };
PrintSkipNl = ";";
PrintListItem = (value:Expression | value:StringLiteral) [sep:PrintListSep];
PrintListSep = ";";

# FOR
ForStatement = KWFor assignment:Assignment KWTo target:Expression [step:ForStep] NewLine body:Block next:ForNext;
#ForStatement = KWFor assignment:Assignment KWTo target:Expression;
ForStep = KWStep value:Expression;
ForNext = KWNext [Variable];


# END
EndStatement  = KWEnd;

# KEYWORDS
KWPrint = 'PRINT';
KWFor = 'FOR';
KWTo = 'TO';
KWStep = 'STEP';
KWNext = 'NEXT';
KWEnd = 'END';

# Variable
Variable = name:VariableName;

@no_skip_ws
@string
VariableName = ( >ALPHA | "_" | "`" ) { >ALPHA | >DIGIT | "_" | "%" | "$" };

# LITERALS
NumberSign = '+' | '-';
NumberLiteral = value:FloatLiteral | value:IntegerLiteral;

@no_skip_ws
@string
IntegerLiteral = [NumberSign] {'0'..'9'}+;

@no_skip_ws
@string
FloatLiteral = [NumberSign] { >DIGIT }+ "." { >DIGIT} [ 'E' { >DIGIT }+ ];

@no_skip_ws
StringLiteral = '"' body:StringBody '"';

@no_skip_ws
@string
StringBody = {!'"' char};


# Basics
ALPHA = 'a'..'z' | 'A'..'Z';
DIGIT = '0'..'9';

@no_skip_ws
Whitespace = {" "};