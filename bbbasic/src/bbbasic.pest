bb_program = { SOI ~ bb_block? ~ bb_statement? ~ EOI }

bb_block = _{ (bb_statement ~ bb_nl)* }


bb_statement = _{ bb_ws* ~
                  (
                   bb_for_statement   |
                   bb_if_statement |
                   bb_print_statement |
                   bb_end_statement |
                   bb_rem_statement |
                   bb_goto_statement |
                   bb_assignment
                  )?
                }

bb_expression = { bb_string | bb_float_literal | bb_int_literal | bb_var_name }

bb_num_expression = { bb_float_literal | bb_int_literal | bb_var_name }

bb_print_statement = { bb_kw_print ~ bb_ws+ ~bb_expression }


// Keywords
bb_kw_print = _{ "PRINT" }
bb_kw_for   = _{ "FOR" }
bb_kw_for_to   = _{ "TO" }
bb_kw_for_next = _{ "NEXT" }
bb_kw_for_step = _{ "STEP" }
bb_kw_endif = _ { "ENDIF" }
bb_kw_end = _{ "END" }
bb_kw_rem = _{ "REM" }
bb_kw_goto = _ { "GOTO" }
bb_kw_if = _ { "IF" }
bb_kw_then = _ { "THEN" }
bb_kw_else = _ { "ELSE" }


bb_ws = _{ (" " | "\t") }
bb_nl = _{ (NEWLINE | (bb_ws+ ~ ":" ~ bb_ws+))+ }
bb_nl_ws = _ { bb_ws | bb_nl }



// REM
bb_any_char = @{ (!NEWLINE ~ ANY)* }
bb_rem_statement = { bb_kw_rem ~ bb_any_char }

// GOTO
bb_goto_statement = { bb_kw_goto ~ bb_ws* ~ bb_int_literal }

// For-Loop
bb_for_step = _{ bb_ws+ ~ bb_kw_for_step ~ bb_ws+ ~ bb_num_expression }
bb_for_iterator_assignment = { bb_var_name ~ bb_ws* ~ "=" ~ bb_ws* ~ bb_num_expression }

bb_for_block = { bb_block }

bb_for_statement = { bb_kw_for  ~ bb_ws+ ~ bb_for_iterator_assignment
					 ~ bb_ws+ ~ bb_kw_for_to ~ bb_ws+ ~ bb_num_expression ~ bb_for_step?
                     ~ bb_nl
                     ~ bb_nl_ws*
                     ~ bb_for_block
                     ~ bb_nl_ws*
                     ~ bb_ws* ~ bb_kw_for_next ~ ( bb_ws+ ~ bb_var_name )?
                     }


// IF-Statement
bb_bool_expression = {"BLA" }

bb_then_block = { bb_block }

bb_else_block = { bb_ws* ~ bb_kw_else ~ bb_nl+ ~ bb_block }

bb_if_statement = { bb_kw_if ~ bb_ws+ ~ bb_bool_expression ~ bb_ws+ ~ bb_kw_then
					~ bb_nl
                    ~ bb_then_block
                    ~ bb_else_block?
                    ~ bb_ws* ~ bb_kw_endif
                   }

//Variables
bb_var_name = { ( ASCII_ALPHA | "_" | "`") ~ ( ASCII_ALPHA | ASCII_DIGIT | "_" | "%" | "$" )* }

// Assignment
bb_assignment = { bb_var_name ~ bb_ws* ~ "=" ~ bb_ws* ~ bb_expression }

// Numbers
bb_number = { ('0'..'9') }
bb_number_sign = { "+" | "-" }

// Integer Literal
bb_int_literal = @{ bb_number_sign? ~ bb_number+ }

// Float Literal
bb_float_literal = @{ bb_number_sign? ~ bb_number+ ~ "." ~ bb_number+ ~ ("E" ~ bb_number+)? }

// String Literal
bb_string = _{ "\"" ~ bb_string_literal ~ "\""}

bb_string_literal = @{ bb_string_char+ }
bb_string_char = { !("\"") ~ ANY}


// END
bb_end_statement = { bb_kw_end }